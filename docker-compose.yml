version: '3.7'

services:
  postgres:
    image: postgres:10.6-alpine
    container_name: go_postgres
    ports:
      - 5492:5432
    networks:
      - broker-kafka
    environment:
      - POSTGRES_USER=dbadmin
      - POSTGRES_PASSWORD=dbadmin
    volumes:
      - ./db_all.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - ./dbdata:/var/lib/postgresql/data:z
    restart: always

  kraken_designer:
    image: devopsfaith/krakendesigner:latest
    container_name: krakend_designer
    ports:
      - 8787:80
    restart: always

  krakend:
    container_name: krakend
    image: devopsfaith/krakend:latest
    entrypoint: /usr/bin/krakend run -d -c /etc/krakend/krakend.json
    networks:
      - broker-kafka
    depends_on:
      - postgres
    volumes:
      - ./api_gateway:/etc/krakend
    ports:
      - 5000:5000
      - 8090:8090
    restart: always

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    networks:
      - broker-kafka
    ports:
      - 16686:16686
      - 14268:14268
    restart: always

  grafana:
    container_name: grafana
    build:
      dockerfile: Dockerfile
      context: ./_grafana
    networks:
      - broker-kafka
    ports:
      - 3003:3000
    restart: always

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    networks:
      - broker-kafka
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password
      DOCKER_INFLUXDB_INIT_ORG: myorg
      DOCKER_INFLUXDB_INIT_BUCKET: krakend
    ports:
      - 8086:8086
    restart: always

  file_server:
    image: jaxgeller/lwan
    container_name: file_server
    platform: linux/amd64
    networks:
      - broker-kafka
    volumes:
      - ./_file_server:/lwan/wwwroot
    ports:
      - 8002:8080
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - broker-kafka
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_CLEANER_DELETE_RETENTION_MS: 5000
      KAFKA_BROKER_ID: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
    restart: always
    # volumes:
    #   - ./_script:/wait
    # command: ["/wait/wait-for-it.sh", "--timeout=0", "zookeeper:2181", "--", "/etc/confluent/docker/run"]

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    platform: linux/amd64
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    restart: always

  keycloak:
    # image: jboss/keycloak:13.0.1
    # image: sleighzy/keycloak
    # image: quay.io/keycloak/keycloak:legacy
    build:
     context: ./
     dockerfile: ./keyloack/Dockerfile
     args:
        ADMIN_USERNAME: admin
        ADMIN_PASSWORD: admin
    container_name: keycloak
    # platform: linux/amd64
    # restart: unless-stopped
    restart: always
    depends_on:
      - postgres
    networks:
      - broker-kafka
    ports:
      - 8080:8080 # expose to host port 8403
      - 9990:9990
      - 8443:8443
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_PORT: 5432
      DB_DATABASE: dbkeyloack
      DB_USER: dbadmin
      DB_PASSWORD: dbadmin
      # KEYCLOAK_USER: admin
      # KEYCLOAK_PASSWORD: admin

  identity-service:
    build:
      context: ./
      dockerfile: ./services.identity/Dockerfile
    container_name: identity_service
    ports:
      - 8081:8081
    networks:
      - broker-kafka
    depends_on:
      - postgres
      - kafka
    # command: sh -c "/wait"
    environment:
      - APP_PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - KAFKA_BROKER_ADDRESS=kafka:9092
    restart: always

  customer-service:
    build:
      context: ./
      dockerfile: ./services.customer/Dockerfile
    container_name: customer_service
    ports:
      - 8082:8082
    networks:
      - broker-kafka
    depends_on:
      - postgres
      - kafka
    # command: sh -c "/wait"
    environment:
      - APP_PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - KAFKA_BROKER_ADDRESS=kafka:9092
    restart: always

  product-service:
    build:
      context: ./
      dockerfile: ./services.product/Dockerfile
    container_name: product_service
    ports:
      - 8083:8083
    networks:
      - broker-kafka
    depends_on:
      - postgres
      - kafka
    # command: sh -c "/wait"
    environment:
      - APP_PORT=8083
      - DB_HOST=postgres
      - DB_PORT=5432
      - KAFKA_BROKER_ADDRESS=kafka:9092
    restart: always

  notification-service:
    build:
      context: ./
      dockerfile: ./services.notification/Dockerfile
    container_name: notification_service
    ports:
      - 8084:8084
    networks:
      - broker-kafka
    depends_on:
      - postgres
      - kafka
    # command: sh -c "/wait"
    environment:
      - APP_PORT=8084
      - DB_HOST=postgres
      - DB_PORT=5432
      - KAFKA_BROKER_ADDRESS=kafka:9092
    restart: always

  order-service:
    build:
      context: ./
      dockerfile: ./services.order/Dockerfile
    container_name: order_service
    ports:
      - 8085:8085
    networks:
      - broker-kafka
    depends_on:
      - postgres
      - kafka
    # command: sh -c "/wait"
    environment:
      - APP_PORT=8085
      - DB_HOST=postgres
      - DB_PORT=5432
      - KAFKA_BROKER_ADDRESS=kafka:9092
      - CUSTOMER_SERVICE_ENDPOINT=http://customer-service:8082/api
    restart: always
  # pactbroker:
  #   container_name: pactbroker
  #   image: pactfoundation/pact-broker:latest
  #   ports:
  #     - 9292:9292
  #   networks: 
  #     - broker-kafka
  #   environment:
  #     - PACT_BROKER_DATABASE_URL=postgresql://dbadmin:dbadmin@postgres:5432/postgres
  #     - PACT_BROKER_BASIC_AUTH_USERNAME=admin
  #     - PACT_BROKER_BASIC_AUTH_PASSWORD=admin
  #     - PACT_BROKER_LOG_LEVEL=INFO
  #     - PACT_BROKER_PORT=9292
  #   restart: on-failure
  #   depends_on:
  #     - postgres

networks:
  broker-kafka:
    driver: bridge
